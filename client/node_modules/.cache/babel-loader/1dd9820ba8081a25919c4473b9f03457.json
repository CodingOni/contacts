{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Test\\\\Documents\\\\GitHub\\\\contacts\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Test\\\\Documents\\\\GitHub\\\\contacts\\\\client\\\\src\\\\context\\\\contact\\\\ContactState.js\";\nimport axios from 'axios';\nimport React, { useReducer } from 'react';\nimport { ADD_CONTACT, GET_CONTACTS, CLEAR_CONTACTS, CLEAR_CURRENT, CLEAR_FILTER, CONTACT_ERROR, DELETE_CONTACT, FILTER_CONTACTS, SET_CURRENT, UPDATE_CONTACT } from '../types';\nimport ContactContext from './contactContext';\nimport ContactReducer from './contactReducer';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const _useReducer = useReducer(ContactReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; //GET Contacts\n\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.mg\n      });\n    }\n  }; //Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n      console.log(contact.id);\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.mg\n      });\n    }\n  }; //Delete Contact\n\n\n  const deleteContact = id => {\n    dispatch({\n      type: DELETE_CONTACT,\n      payload: _id\n    });\n  }; //CLEAR Contacts\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; //Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; //Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; //Update Contact\n\n\n  const updateContact = contact => {\n    dispatch({\n      type: UPDATE_CONTACT,\n      payload: contact\n    });\n  }; //Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; //ClearFilter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(ContactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      getContacts,\n      addContact,\n      deleteContact,\n      setCurrent,\n      filterContacts,\n      clearFilter,\n      clearCurrent,\n      clearContacts,\n      updateContact\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["C:\\Users\\Test\\Documents\\GitHub\\contacts\\client\\src\\context\\contact\\ContactState.js"],"names":["axios","React","useReducer","ADD_CONTACT","GET_CONTACTS","CLEAR_CONTACTS","CLEAR_CURRENT","CLEAR_FILTER","CONTACT_ERROR","DELETE_CONTACT","FILTER_CONTACTS","SET_CURRENT","UPDATE_CONTACT","ContactContext","ContactReducer","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","mg","addContact","contact","config","headers","post","console","log","id","deleteContact","_id","clearContacts","setCurrent","clearCurrent","updateContact","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useReducer } from 'react';\r\nimport {\r\n  ADD_CONTACT,\r\n  GET_CONTACTS,\r\n  CLEAR_CONTACTS,\r\n  CLEAR_CURRENT,\r\n  CLEAR_FILTER,\r\n  CONTACT_ERROR,\r\n  DELETE_CONTACT,\r\n  FILTER_CONTACTS,\r\n  SET_CURRENT,\r\n  UPDATE_CONTACT\r\n} from '../types';\r\nimport ContactContext from './contactContext';\r\nimport ContactReducer from './contactReducer';\r\n\r\nconst ContactState = props => {\r\n  const initialState = {\r\n    contacts: [],\r\n    current: null,\r\n    filtered: null,\r\n    error: null\r\n  };\r\n  const [state, dispatch] = useReducer(ContactReducer, initialState);\r\n\r\n  //GET Contacts\r\n\r\n  const getContacts = async () => {\r\n    try {\r\n      const res = await axios.get('/api/contacts');\r\n      dispatch({ type: GET_CONTACTS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: CONTACT_ERROR, payload: err.response.mg });\r\n    }\r\n  };\r\n  //Add Contact\r\n  const addContact = async contact => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post('/api/contacts', contact, config);\r\n      dispatch({ type: ADD_CONTACT, payload: res.data });\r\n      console.log(contact.id);\r\n    } catch (err) {\r\n      dispatch({ type: CONTACT_ERROR, payload: err.response.mg });\r\n    }\r\n  };\r\n  //Delete Contact\r\n  const deleteContact = id => {\r\n    dispatch({ type: DELETE_CONTACT, payload: _id });\r\n  };\r\n\r\n  //CLEAR Contacts\r\n  const clearContacts = () => {\r\n    dispatch({ type: CLEAR_CONTACTS });\r\n  };\r\n\r\n  //Set Current Contact\r\n  const setCurrent = contact => {\r\n    dispatch({ type: SET_CURRENT, payload: contact });\r\n  };\r\n  //Clear Current Contact\r\n  const clearCurrent = () => {\r\n    dispatch({ type: CLEAR_CURRENT });\r\n  };\r\n  //Update Contact\r\n  const updateContact = contact => {\r\n    dispatch({ type: UPDATE_CONTACT, payload: contact });\r\n  };\r\n  //Filter Contacts\r\n  const filterContacts = text => {\r\n    dispatch({ type: FILTER_CONTACTS, payload: text });\r\n  };\r\n  //ClearFilter\r\n  const clearFilter = () => {\r\n    dispatch({ type: CLEAR_FILTER });\r\n  };\r\n  return (\r\n    <ContactContext.Provider\r\n      value={{\r\n        contacts: state.contacts,\r\n        current: state.current,\r\n        filtered: state.filtered,\r\n        error: state.error,\r\n        getContacts,\r\n        addContact,\r\n        deleteContact,\r\n        setCurrent,\r\n        filterContacts,\r\n        clearFilter,\r\n        clearCurrent,\r\n        clearContacts,\r\n        updateContact\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ContactContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ContactState;\r\n"]},"metadata":{},"sourceType":"module"}